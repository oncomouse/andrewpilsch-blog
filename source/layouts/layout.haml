- require "emoji_data"
- require "fastimage"
!!! 5
%html
	%head{ prefix: "og: http://ogp.me/ns#"}
		%meta{ charset:"utf-8",  }
		%meta{ "http-equiv" => "X-UA-Compatible", content:"IE:edge;chrome:1",  }
		%meta{ name:"viewport", content:"width=device-width, initial-scale=1", }

		- page_title = "Blog Title"
		- if (not data.blog.nil?) and data.blog.has_key? "title"
			- page_title = data.blog.title 
		- if(!current_page.data.nil? and current_page.data.has_key? 'title')
			- page_title += " - " + current_page.data.title

		%title= page_title
		
		- page_description = nil
		-if current_page.data.has_key? "description"
			- page_description = Haml::Filters::Markdown.render(current_page.data["description"])
		-elsif defined? current_article and current_article.respond_to? :summary
			- page_description = current_article.summary(350)
		-if not page_description.nil?
			- page_description = Nokogiri::HTML(page_description).text.gsub(/\'/,"\\'")
			%meta{ property: "description", content: "#{page_description}" }
		%meta{ name: "author", content: ((not data.blog.nil?) and data.blog.has_key? "author") ? data.blog.author : "Blog Author" }
		%link{ rel: "canonical", href: "#{config[:site_deploy_root]}#{current_page.url}" }
		
		/ Open Graph Stuff
		%meta{ property: "og:locale", content: "en_US" }
		%meta{ property: "og:url", content: "#{config[:site_deploy_root]}#{current_page.url}" }
		-if page_description.nil?
			- page_description = "Andrew Pilsch's Blog"
		%meta{ property: "og:description", :content=> page_description }
		%meta{ property: "og:title", content: ((!current_page.data.nil? and current_page.data.has_key? 'title') ? current_page.data.title : page_title).gsub(/[_*]/,"") }
		%meta{ property: "og:site_name", content: data.blog.title }
		%meta{ property: "og:type", content: "article" }
		%meta{ property: "article:author", content: ((not data.blog.nil?) and data.blog.has_key? "author") ? data.blog.author : "Blog Author" }
		%meta{ property: "article:published_time", content: (((not current_page.data.nil?) and current_page.data.has_key? "date") ? DateTime.parse(current_page.data.date) : Time.now.to_datetime).strftime('%Y-%m-%dT%H:%M:%S.%L%z')}
		- page_image = image_path('me.png')
		- if current_page.respond_to? :body
			- nokogiri_img = Nokogiri::HTML(current_page.body).css('img.splash')
			- if nokogiri_img.length > 0
				- page_image = image_path(nokogiri_img.first.attribute "src")
		- page_image_file = nil
		- if (page_image.to_s =~ /^http[s]{0,1}\:/).nil? 
			- if build?
				-page_image_file = Dir.pwd + "/source/" + page_image.gsub(Regexp.new("/{0,1}#{config[:http_prefix].gsub(/\//,"")}/{0,1}"),"")
			- else
				-page_image_file = Dir.pwd + "/source" + page_image 
		- else 
			- page_image_file = page_image
		%meta{ property: "og:image", content:  (page_image.to_s =~ /^http[s]{0,1}\:/).nil? ? "#{config[:site_deploy_root]}" + page_image : page_image }
		- if page_image.to_s =~ /^http[s]{0,1}\:/.nil?
			%meta{ property: "og:image:width", content: FastImage.size(page_image_file)[0]}
			%meta{ property: "og:image:height", content: FastImage.size(page_image_file)[1]}
		- if not (page_image.to_s =~ /me.png$/).nil?
			-#%meta{ property: "og:image:secure_url", content: "https://s3.amazonaws.com/pilschwebimage/me.png"}
		%meta{ property: "og:image:type", content: "image/#{FastImage.type(page_image_file).to_s}"}

		/ Twitter Card Stuff
		%meta{ name: "twitter:card", content: "summary_large_image" }
		%meta{ name: "twitter:creator", content: "@oncomouse" }
		%meta{ name: "twitter:description", :content=> page_description }
		%meta{ name: "twitter:title", content: page_title.gsub(/[_*]/,"") }
		%meta{ name: "twitter:image:src", content: (page_image.to_s =~ /^http[s]{0,1}\:/).nil? ? "#{config[:site_deploy_root]}" + page_image : page_image }
		
		- # Attach RSS feed:
		= feed_tag :rss, "#{blog.options.prefix.to_s}/rss.xml", title: "RSS Feed"
		
		- # Feature detection!
		- #
		- # This is the part of this site of which I am the most proud. If possible (ie. the site is not an index page), we load Nokogiri and parse the HTML body to detect whether we need to load a particular JavaScript/CSS asset on a particular article.
		- #
		- # This is slow, but it doesn't matter. That's the beauty of static sites: we can do all sorts of horribly inefficient operations and it doesn't matter because the horribly inefficient operation is only performed once, at build time. Similarly, just because a site is static does not mean that we cannot do things such as dynamic asset loading at build time. The advantage is that we don't have to do this EVERY time we serve a page!
		- $features = []
		- $features.push :site
		- if (current_page.respond_to? "body")
			- $html_body = Nokogiri::HTML(current_page.body)
			- $features.push :syntax if $html_body.css("pre code").length > 0
			- $features.push :modal if $html_body.css("img").length > 0
			- $features.push :footnotes if $html_body.css("*[id^=fnref]").length > 0
			- $features.push :emoji if (EmojiData.scan(current_page.body.to_s).length > 0 || EmojiData.scan(current_page.title.to_s).length > 0)
		- else
			- # Load all features if index page (let God sort 'em out)
			- $features.push(:emoji, :footnotes, :modal, :syntax)
		= stylesheet_link_tag "https://fonts.googleapis.com/css?family=Lato:400,400i,700,700i|Alegreya:700,900,700i#{($features.index :syntax) ? "|Roboto+Mono:500" : ""}"
		- # Load CSS files based on features (CSS files are all named $features.css, where $feature is the particular symbol for that feature)
		- if $features.index(:site)
			- # Make sure that we load site.css first
			- $features.delete_at($features.index(:site))
			- $features.unshift(:site)
		-if build?
			- # We are using a PHP asset packer on the server end, so make sure it gets triggered:
			= stylesheet_link_tag $features.map{|x| x.to_s}.join('.css,')
		- else
			= stylesheet_link_tag $features
	%body{ class: page_classes}
		%header{role: "banner"}
			- blog_title = ((not data.blog.nil?) and (data.blog.has_key? "title")) ? data.blog.title.gsub(/(\w+)/) {"<span class=\"#{$1.downcase}\">#{$1}</span>"} : "Blog Title"
			%h1= (current_page.request_path == "index.html") ? blog_title : link_to(blog_title, "/index.html")
		- if current_article.nil?
			= build? ? (preserve yield).gsub("&#x000A;","") : (preserve yield)
		- else
			= build? ? (partial "partials/article", locals: { current_article: current_article }).gsub("&#x000A;","") : (partial "partials/article", locals: { current_article: current_article })
		%footer
			#colophon{role: "contentinfo"}
				= partial "colophon"
		- # Build an array of JavaScript files to load based on requested site features:
		- $jquery = "jquery" # We could load off a CDN someday
		- $javascripts = []
		- if $features.index :footnotes
			- $javascripts << $jquery << "fancy-footnotes"
		- if $features.index :modal
			- $javascripts << $jquery << "modal"
		- if $features.index :emoji
			- $javascripts << "twemoji"
		- # Make sure we don't, for instance, load jquery twice:
		- $javascripts.uniq!
		- # If we need JavaScript, we can load them:
		- if $javascripts.length > 0
			- # Load jQuery first, just to be sure:
			- if $javascripts.index($jquery)
				- $javascripts.delete_at($javascripts.index($jquery))
				- $javascripts.unshift($jquery)
			- if build?
				- # We are using a PHP asset packer on the server end, so make sure it gets triggered:
				= javascript_include_tag $javascripts.join('.js,')
			-else
				= javascript_include_tag $javascripts